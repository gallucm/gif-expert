{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","onSubmit","type","value","onChange","target","placeholder","class","title","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"8KAGaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAMMC,EAAe,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,EAAYE,GACZC,EAAc,MAItB,OACI,qCACA,uBAAMM,SAAUL,EAAhB,UACI,uBACIM,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAmBfG,YAAY,kBALpB,OAQI,wBAAQJ,KAAK,SAASK,MAAM,6BAA6BC,MAAM,YAAYP,SAAUL,EAArF,uBAEJ,2B,8BC/BKa,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAAE,MAAO,CAAEC,GAAID,EAAIC,GAAIb,MAAOY,EAAIZ,MAAOI,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QANrF,kBASZM,GATY,4CAAH,sDCEPM,EAAc,SAAC,GAAoB,IAAlBhB,EAAiB,EAAjBA,MAAOI,EAAU,EAAVA,IAEjC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKnB,IACpB,4BAAIA,QCHHoB,EAAU,SAAC,GAAkB,IAE1BN,ECHY,SAAEZ,GAC1B,MAA0BjB,mBAAS,CAC/BwB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACPvB,EAAQC,GACHuB,MAAM,SAAAC,GACHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGtB,CAACnB,IAEGoB,EDbeK,CAFe,EAAfzB,UAEfO,KAEP,OACI,qCACI,uBACA,uBAEA,qBAAKQ,UAAU,YAAf,SAEQH,EAAOH,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEOtBe,EApBM,WAGjB,MAAgC3C,mBAAS,IAAzC,mBAAOiB,EAAP,KAAiBlB,EAAjB,KAEA,OACI,qCACI,kDACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,uBAEA,6BAEQ,cAAC,EAAD,CAASkB,SAAUA,U,MCZvC2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f0b6994f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategory }) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 0) {\r\n            setCategory(inputValue);\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Busca algo...\"\r\n            />\r\n            &nbsp;\r\n            <button type=\"submit\" class=\"btn btn-success btn-search\" title=\"Buscar...\" onSubmit={handleSubmit}>Buscar</button>            \r\n        </form>\r\n        <br/>\r\n        </>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=5fcjMhpIDMMGEGMPXB37bREwCBtiJREF`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => { return { id: img.id, title: img.title, url: img.images?.downsized_medium.url }\r\n    })\r\n\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <br/>\r\n            \r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });                \r\n            })\r\n    }, [category])\r\n\r\n    return state; // {data:[], loading: true};\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const [categories, setCategories] = useState([]);\r\n    const [category, setCategory] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <h2>Buscador de GIFS</h2>\r\n            <AddCategory setCategory={setCategory} />\r\n            <hr />\r\n\r\n            <ul>\r\n                {\r\n                    <GifGrid category={category}/>\r\n                }\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}