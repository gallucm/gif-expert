{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","setLimit","useState","inputValue","setInputValue","inputLimit","setInputLimit","handleSubmit","e","preventDefault","trim","length","onSubmit","type","className","value","onChange","target","placeholder","max","disabled","undefined","title","getGifs","category","a","limit","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","downloadGif","image","blob","imageB","imageURL","URL","createObjectURL","link","document","createElement","href","download","splitTitle","body","appendChild","click","removeChild","split","GifGridItem","src","alt","onClick","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","defaultCategory","defaultLimit","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2fa561c7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategory, setLimit }) => {\r\n\r\n    const defaulLimitValue = 5;\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [inputLimit, setInputLimit] = useState(defaulLimitValue);\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleLimitChange = (e) => {\r\n        setInputLimit(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 0 && inputLimit > 0) {\r\n            setCategory(inputValue);\r\n            setLimit(inputLimit);\r\n\r\n            setInputLimit(defaulLimitValue);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>            \r\n            <form onSubmit={handleSubmit} >\r\n                <input\r\n                    type=\"text\"                    \r\n                    className=\"form-control w-25 m-auto mb-3 mt-3 mw-200 input-value\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Busca algo...\"\r\n                    />\r\n                <input \r\n                    type=\"number\"\r\n                    max={50}\r\n                    className=\"form-control m-auto mb-3 mt-3 mw-200 limit-value\"\r\n                    value={inputLimit}\r\n                    onChange={handleLimitChange}\r\n                    placeholder=\"Cantidad...\"\r\n                />\r\n\r\n                <button type=\"submit\" disabled={inputValue === '' || (inputLimit <= 0 || inputLimit === undefined)} className=\"btn btn-success btn-search\" title=\"Buscar...\" onSubmit={handleSubmit}>Buscar</button>                                           \r\n            </form>\r\n          \r\n            <br/>\r\n        </>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category, limit=10) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&api_key=5fcjMhpIDMMGEGMPXB37bREwCBtiJREF`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return { id: img.id, title: img.title, url: img.images?.downsized_medium.url }\r\n    })\r\n\r\n    return gifs\r\n}\r\n\r\nexport const downloadGif = async (url, title) => {\r\n    const image = await fetch(url);\r\n    const imageB = await image.blob();\r\n    const imageURL = URL.createObjectURL(imageB); \r\n    const link = document.createElement('a');\r\n\r\n    link.href = imageURL;\r\n    link.download = splitTitle(title);\r\n    document.body.appendChild(link);\r\n    \r\n    link.click();\r\n    document.body.removeChild(link);\r\n}\r\n\r\nconst splitTitle = (title) => {\r\n    const fullTitle = title.split(' ');    \r\n    return fullTitle[0];\r\n};","import React from 'react'\r\nimport Proptypes from 'prop-types';\r\nimport { downloadGif } from '../helpers/getGifs';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    \r\n    const handleDownload = () => {\r\n        downloadGif(url, title);\r\n    }   \r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} id=\"img-gif\"/>\r\n            <button className=\"btn\" title=\"Descargar GIF\" onClick={handleDownload}><i className=\"fa fa-download btn-download\"></i></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: Proptypes.string.isRequired,\r\n    url: Proptypes.string.isRequired\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGrid = ({ category, limit }) => {\r\n\r\n    const {data:images} = useFetchGifs(category, limit);\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <br/>\r\n            \r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired,    \r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category, limit ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category, limit)\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });                \r\n            })\r\n    }, [category, limit])\r\n\r\n    return state; // {data:[], loading: true};\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = ({ defaultCategory = '', defaultLimit = 5 }) => {\r\n\r\n    const [category, setCategory] = useState(defaultCategory);\r\n    const [limit, setLimit] = useState(defaultLimit);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {/* <div className=\"form-check form-switch\">\r\n                    <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckChecked\"/>   \r\n                </div>   */}\r\n                <h2 className=\"the-title\">Buscador de GIFS</h2>\r\n            </div>\r\n            \r\n\r\n            <AddCategory setCategory={setCategory} setLimit={setLimit} />\r\n            <hr />\r\n\r\n            <ul>\r\n                {\r\n                    <GifGrid category={category} limit={limit} />\r\n                }\r\n            </ul>     \r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}